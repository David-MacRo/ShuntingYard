/*
 * This source file was generated by the Gradle 'init' task
 */
package shuntingyard;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ExpressionTest {
    /*
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
     */

    @Test void isLetter(){
        
        //Ascii chars: "!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
        
        assertFalse(Expression.isLetter('"'));
        assertFalse(Expression.isLetter('!'));
        assertFalse(Expression.isLetter('5'));
        assertFalse(Expression.isLetter(';'));
        assertFalse(Expression.isLetter('@'));

        assertTrue(Expression.isLetter('A'));
        assertTrue(Expression.isLetter('B'));
        assertTrue(Expression.isLetter('C'));
        assertTrue(Expression.isLetter('Y'));
        assertTrue(Expression.isLetter('Z'));

        assertFalse(Expression.isLetter('['));
        assertFalse(Expression.isLetter('^'));
        assertFalse(Expression.isLetter('`'));

        assertTrue(Expression.isLetter('a'));
        assertTrue(Expression.isLetter('b'));
        assertTrue(Expression.isLetter('c'));
        assertTrue(Expression.isLetter('y'));
        assertTrue(Expression.isLetter('z'));
        
        assertFalse(Expression.isLetter('{'));
        assertFalse(Expression.isLetter('~'));
    }

    @Test void isDigit(){

        //Ascii chars: "!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

        assertFalse(Expression.isDigit('"'));
        assertFalse(Expression.isDigit('!'));
        assertFalse(Expression.isDigit('$'));
        assertFalse(Expression.isDigit('.'));
        assertFalse(Expression.isDigit('/'));

        assertTrue(Expression.isDigit('0'));
        assertTrue(Expression.isDigit('1'));
        assertTrue(Expression.isDigit('2'));
        assertTrue(Expression.isDigit('3'));
        assertTrue(Expression.isDigit('4'));
        assertTrue(Expression.isDigit('5'));
        assertTrue(Expression.isDigit('6'));
        assertTrue(Expression.isDigit('7'));
        assertTrue(Expression.isDigit('8'));
        assertTrue(Expression.isDigit('9'));

        assertFalse(Expression.isDigit(':'));
        assertFalse(Expression.isDigit('='));
        assertFalse(Expression.isDigit('A'));
        assertFalse(Expression.isDigit('X'));
        assertFalse(Expression.isDigit('Z'));
        assertFalse(Expression.isDigit('_'));
        assertFalse(Expression.isDigit('`'));
        assertFalse(Expression.isDigit('f'));
        assertFalse(Expression.isDigit('n'));
        assertFalse(Expression.isDigit('q'));
        assertFalse(Expression.isDigit('|'));
        assertFalse(Expression.isDigit('~'));
    }

    @Test void isOperator(){

        //Ascii chars: !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

        assertFalse(Expression.isOperator('"'));
        assertFalse(Expression.isOperator('!'));
        assertFalse(Expression.isOperator('$'));
        assertFalse(Expression.isOperator('.'));
        assertFalse(Expression.isOperator('0'));
        assertFalse(Expression.isOperator('5'));
        assertFalse(Expression.isOperator('9'));
        assertFalse(Expression.isOperator(':'));
        assertFalse(Expression.isOperator('='));
        assertFalse(Expression.isOperator('A'));
        assertFalse(Expression.isOperator('X'));
        assertFalse(Expression.isOperator('Z'));
        assertFalse(Expression.isOperator('_'));
        assertFalse(Expression.isOperator('`'));
        assertFalse(Expression.isOperator('f'));
        assertFalse(Expression.isOperator('n'));
        assertFalse(Expression.isOperator('q'));
        assertFalse(Expression.isOperator('|'));
        assertFalse(Expression.isOperator('~'));
        
        assertTrue(Expression.isOperator('+'));
        assertTrue(Expression.isOperator('-'));
        assertTrue(Expression.isOperator('*'));
        assertTrue(Expression.isOperator('/'));
        assertTrue(Expression.isOperator('^'));
    }

}